// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/raphael-foliveira/go-table-tests/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockUsersService is an autogenerated mock type for the UsersService type
type MockUsersService struct {
	mock.Mock
}

type MockUsersService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersService) EXPECT() *MockUsersService_Expecter {
	return &MockUsersService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: email, password
func (_m *MockUsersService) Login(email string, password string) (*domain.LoginResponse, error) {
	ret := _m.Called(email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *domain.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.LoginResponse, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.LoginResponse); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUsersService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *MockUsersService_Expecter) Login(email interface{}, password interface{}) *MockUsersService_Login_Call {
	return &MockUsersService_Login_Call{Call: _e.mock.On("Login", email, password)}
}

func (_c *MockUsersService_Login_Call) Run(run func(email string, password string)) *MockUsersService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockUsersService_Login_Call) Return(_a0 *domain.LoginResponse, _a1 error) *MockUsersService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersService_Login_Call) RunAndReturn(run func(string, string) (*domain.LoginResponse, error)) *MockUsersService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Signup provides a mock function with given fields: payload
func (_m *MockUsersService) Signup(payload *domain.SignupPayload) (*domain.SignupResponse, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for Signup")
	}

	var r0 *domain.SignupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.SignupPayload) (*domain.SignupResponse, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(*domain.SignupPayload) *domain.SignupResponse); ok {
		r0 = rf(payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SignupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.SignupPayload) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsersService_Signup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Signup'
type MockUsersService_Signup_Call struct {
	*mock.Call
}

// Signup is a helper method to define mock.On call
//   - payload *domain.SignupPayload
func (_e *MockUsersService_Expecter) Signup(payload interface{}) *MockUsersService_Signup_Call {
	return &MockUsersService_Signup_Call{Call: _e.mock.On("Signup", payload)}
}

func (_c *MockUsersService_Signup_Call) Run(run func(payload *domain.SignupPayload)) *MockUsersService_Signup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.SignupPayload))
	})
	return _c
}

func (_c *MockUsersService_Signup_Call) Return(_a0 *domain.SignupResponse, _a1 error) *MockUsersService_Signup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsersService_Signup_Call) RunAndReturn(run func(*domain.SignupPayload) (*domain.SignupResponse, error)) *MockUsersService_Signup_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersService creates a new instance of MockUsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersService {
	mock := &MockUsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
